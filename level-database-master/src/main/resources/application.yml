
spring:
  # 配置说明地址 https://shardingsphere.apache.org/document/legacy/4.x/document/cn/manual/sharding-jdbc/configuration/config-spring-boot/#%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87
  shardingsphere:
    # 数据库
    datasource:
      # 数据库的别名
      names: m1,m2
      # 数据库0
      m1:
        ###  数据源类别
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/order_db_1?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8
        username: root
        password: root
      # 数据库1
      m2:
        ###  数据源类别
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/order_db_2?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8
        username: root
        password: root

    # *** 数据库分库分表配置 start
    sharding:
      # 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略
      # 1.默认分库策略 m1,m2:通过字段order_id进行分库策略，对2取余为1入库1，对2取余为1入库2
      default-database-strategy:
        inline:
          sharding-column: order_id
          algorithm-expression: m$->{order_id % 2 + 1}
      # 2.默认分表策略 t_order_1,t_order_2:通过字段user_id进行分库策略，对2取余为0入表1，对2取余为1入表2
      default-table-strategy:
        inline:
          sharding-column: user_id  # 分表策略 其中user为逻辑表 分表主要取决于age行
          algorithm-expression: t_order_$->{user_id % 2 + 1}
      # 数据节点
      tables:
        t_order:
          actual-data-nodes: m$->{1..2}.t_order_$->{1..2}
          keyGenerator:
            type: SNOWFLAKE   #雪花算法，解决主键避重问题
            column: order_id

      #声明公告表：如字典表
      broadcast-tables: t_dict
    props:
      # 打印SQL
      sql.show: true
      check:
        table:
          metadata: true
          # 是否在启动时检查分表元数据一致性
          enabled: true
      query:
        with:
          cipher:
            column: true
  main:
    allow-bean-definition-overriding: true
server:
  port: 9092