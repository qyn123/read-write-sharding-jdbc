server:
  port: 9091
spring:
  application:
    name: level-tabel-master
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    datasource:
      names: m1
      m1:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/order_db?useUnicode=true
        username: root
        password: root
    sharding:
      tables:
        t_order:
          actualDataNodes: m1.t_order_$->{1..2}         #分表策略
          tableStrategy:
            inline:
              shardingColumn: order_id
              #分表策略：如插入一条订单，根据order_id进行取余,如果结果为偶数，则映射到m1.t_order_2;如果结果为奇数，则映射到m1.t_order_1中
              algorithmExpression: t_order_$->{order_id % 2 + 1}
          keyGenerator:
            type: SNOWFLAKE   #雪花算法，解决主键避重问题
            column: order_id
    props:     #开启sharding-jdbc的sql语句
      sql:
        show: true

logging:
  level:
    root: info
    org.springframework.web: info
    com.itheima.dbsharding: debug
    druid.sql: debug

#开启驼峰命名
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
